<?php

/**
 * @file
 * Contains theme override functions and preprocess functions
 */

/**
 * Implements hook_preprocess_html().
 */
function gratis_preprocess_html(&$vars) {

  if (theme_get_setting('gratis_viewport') == FALSE) {

    // No pinch and zoom.
    $viewport = array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'viewport',
        'content' => 'initial-scale=1, width=device-width, maximum-scale=1, user-scalable=no',
      ),
    );
    drupal_add_html_head($viewport, 'viewport');
  }

  else {

    // Pinch and Zoom enabled.
    $viewport = array(
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => array(
        'name' => 'viewport',
        'content' => 'width=device-width, initial-scale=1.0, maximum-scale=2.0, minimum-scale=0.55, user-scalable=yes',
      ),
    );
    drupal_add_html_head($viewport, 'viewport');
  }

  // @todo - get rid of depricated function.
  // Add opensans from Google fonts.
  // http://www.google.com/fonts#UsePlace:use/Collection:Open+Sans:400italic,600italic,700italic,400,600,700
  drupal_add_css('//fonts.googleapis.com/css?family=Open+Sans:400italic,600italic,700italic,400,600,700',array('type' => 'external'));

  // Add a body class is the site name is hidden or not.
  if (theme_get_setting('toggle_name') == FALSE) {
    $vars['attributes']['class'][] = 'site-name-hidden';
  }
  else {
    $vars['attributes']['class'][] = 'site-name';
  }

  // Add a body class is the site slogan is hidden or not.
  if (theme_get_setting('toggle_slogan')) {
    $vars['attributes']['class'][] = 'site-slogan';
  }
  else {
    $vars['attributes']['class'][] = 'site-slogan-hidden';
  }

  // Add a body class is the theme logo is hidden or not.
  if (theme_get_setting('gratis_themelogo') == TRUE) {
    $vars['attributes']['class'][] = 'theme-logo';
  }
  else {
    $vars['attributes']['class'][] = 'theme-logo-none';
  }

  // Add IE 9 fixes style sheet.
  drupal_add_css(path_to_theme() . '/css/ie9-fixes.css',
    array(
//      'group' => CSS_AGGREGATE_THEME,
      'browsers' =>
        array(
          'IE' => 'iE 9',
          '!IE' => FALSE),
      'preprocess' => FALSE));

  // Extra body classes for theme variables.
  // The Color Palette.
  $file = theme_get_setting('theme_color_palette');
  $vars['attributes']['class'][] = drupal_html_class('color-palette-' . $file);

  // Test if page is a node or not and then add a body class.
  if ($node = menu_get_object()) {
    $vars['attributes']['class'][] = 'is-node';
  }
  else {
    $vars['attributes']['class'][] = 'not-node';
  }

}

/**
 * Override or insert variables into the page template.
 */
function gratis_preprocess_page(&$vars, $hook) {

  // Build the main menu links tree.
  $vars['primary_nav'] = FALSE;
  if (!empty($vars['main_menu'])) {
    // Build links.
    $config = Drupal::config('menu.settings');
    $menu_enabled = Drupal::moduleHandler()->moduleExists('menu');
    // When menu module is not enabled, we need a hardcoded default values.
    $main_links_source = $menu_enabled ? $config->get('main_links') : 'main';
    $vars['main_menu'] = menu_tree($main_links_source);
    $vars['main_menu']['#theme_wrappers'] = array('menu_tree__primary');
    $vars['main_menu']['#attributes']['id'] = 'main-menu-links';
    $vars['main_menu']['#attributes']['class'] = array('links', 'clearfix');
  }

    // If the default logo is used, then determine which color and set the path.
  $file = theme_get_setting('theme_color_palette');
  if (theme_get_setting('gratis_themelogo') == TRUE) {
    $vars['logo'] = base_path() . path_to_theme() . '/images/logo-' . $file . '.png';
  }

  // Check if it's a node and set a variable.
  $vars['is_node'] = FALSE;
  if ($node = menu_get_object()) {
    $vars['is_node'] = TRUE;
  }

  // Set the custom grid width in a variable.
  $gridwidth = theme_get_setting('gratis_grid_container_width');
  $vars['thegrid'] = $gridwidth;

  // Add information about the number of sidebars.
  // Both sidebars.
  if (!empty($vars['page']['sidebar_first']) && !empty($vars['page']['sidebar_second'])) {
    $vars['sb_columns'] = 'grid-20 pull-60';
    $vars['content_columns'] = 'grid-60 push-20';
  }
  // Sidebar first.
  elseif (!empty($vars['page']['sidebar_first'])) {
    $vars['sb_columns'] = 'grid-20 pull-80';
    $vars['content_columns'] = 'grid-80 push-20';
  }
  // Sidebar second.
  elseif (!empty($vars['page']['sidebar_second'])) {
    $vars['sb_columns'] = 'grid-20 sidebar';
    $vars['content_columns'] = 'grid-80';
  }
  // no sidebars
  else {
    $vars['sb_columns'] = 1;
  }

  // Postscript columns ('$pos_columns').
  if (!empty($vars['page']['postscript_first']) && !empty($vars['page']['postscript_second']) && !empty($vars['page']['postscript_third'])) {
    $vars['pos_columns'] =  'grid-33 postscript';
  }
  elseif (!empty($vars['page']['postscript_first']) && !empty($vars['page']['postscript_second'])) {
    $vars['pos_columns'] = 'grid-50 postscript';
  }
  elseif (!empty($vars['page']['postscript_first']) && !empty($vars['page']['postscript_third'])) {
    $vars['pos_columns'] = 'grid-50 postscript';
  }
  elseif (!empty($vars['page']['postscript_second']) && !empty($vars['page']['postscript_third'])) {
    $vars['pos_columns'] = 'grid-50 postscript';
  }
  else {
    $vars['pos_columns'] =  'grid-100 postscript';
  }

  // Postscript columns ('$pre_columns').
  if (!empty($vars['page']['preface_first']) && !empty($vars['page']['preface_second']) && !empty($vars['page']['preface_third'])) {
    $vars['pre_columns'] =  'grid-33 preface';
  }
  elseif (!empty($vars['page']['preface_first']) && !empty($vars['page']['preface_second'])) {
    $vars['pre_columns'] = 'grid-50 preface';
  }
  elseif (!empty($vars['page']['preface_first']) && !empty($vars['page']['preface_third'])) {
    $vars['pre_columns'] = 'grid-50 preface';
  }
  elseif (!empty($vars['page']['preface_second']) && !empty($vars['page']['preface_third'])) {
    $vars['pre_columns'] = 'grid-50 preface';
  }
  else {
    $vars['pre_columns'] =  'grid-100 preface';
  }

  // @todo fix weighting
  $path = drupal_get_path('theme', 'gratis');
  
  if (theme_get_setting('gratis_localcss') == TRUE) {
    $local_css = array(
      '#attached' => array(
        'css' => array(
          $path . '/css/local.css',
          'group' => CSS_AGGREGATE_THEME,
          'weight' => 9999,
          'preprocess' => TRUE,
        ),
      ),
    );
  }
  drupal_render($local_css);

  // @todo fix weighting
  if (theme_get_setting('gratis_custom_css_location') == TRUE) {
    $custompath = theme_get_setting('gratis_custom_css_path');
    if (file_exists($path)) {
      $custompathcss = array(
        '#attached' => array(
          'css' => array(
            $path . $custompath,
            'group' => CSS_AGGREGATE_THEME,
            'weight' => 9999,
            'preprocess' => TRUE,
          ),
        ),
      );
    }
  }
  drupal_render($custompathcss);


  $local_js = array(
    '#attached' => array(
      'js' => array(
        $path . '/js/scripts.js',
        'group' => JS_THEME,
        'weight' => 9999,
        'preprocess' => TRUE,
      ),
    ),
  );
  drupal_render($local_js);
}

/**
 * Override or insert variables into the node template.
 */
function gratis_preprocess_node(&$vars, $hook) {
  // Global node.
  $node = $vars['node'];

  if ($vars['view_mode'] == 'full' && node_is_page($node)) {
    $vars['attributes']['class'][]= 'node-full';
  }

  if ($vars['view_mode'] == 'teaser' && node_is_page($node)) {
    $vars['attributes']['class'][] = 'node-teaser';
  }

  // Some nice expanded classes for Nodes.
  $vars['attributes_array']['role'][] = 'article';
  $vars['title_attributes_array']['class'][] = 'article-title';
  $vars['content_attributes_array']['class'][] = 'article-content';

  // Show only the username in submitted, the date is handled by node.tpl.php.
  $vars['submitted'] = t('Submitted by !username',
    array('!username' => $vars['name']));

  /*
  Set date variables using drupal's format_date function.
  node base fields have methods now, that are defined in NodeInterface.
  https://api.drupal.org/api/drupal/core!modules!node!lib!Drupal!node!NodeInterface.php/interface/NodeInterface/8
   */
 // $vars['themonth'] = format_date($node->created, "custom", "M");
  $vars['thedate'] = format_date($node->getCreatedTime(), "custom", "j");
  $vars['themonth'] = format_date($node->getCreatedTime(), "custom", "M");
  $vars['theyear'] = format_date($node->getCreatedTime(), "custom", "Y");
}

/**
 * Process variables for comment.html.twig.
 *
 * @see comment.html.twig
 */
function gratis_preprocess_comment(&$vars) {
  $comment = $vars['elements']['#comment'];
  $vars['comment'] = $comment;
  $vars['created'] = format_date($comment->created->value, "custom", "m / j / y");
}

/**
 * Insert themed breadcrumb page navigation at top of the node content.
 */
function gratis_breadcrumb($vars) {
  // Show breadcrumbs if checked.
  if (theme_get_setting('breadcrumb') == 1) {
    // Theme the breadcrumbs.
    $breadcrumb = $vars['breadcrumb'];
    if (!empty($breadcrumb)) {
      // Use CSS to hide titile .element-invisible.
      $output = '<h2 class="element-invisible">' . t('You are here') . '</h2>';
      // Comment below line to hide current page to breadcrumb.
      $breadcrumb[] = drupal_get_title();
      $output .= '<nav class="breadcrumb">' . implode(' Â» ', $breadcrumb) . '</nav>';
      return $output;
    }
  }
}

/**
 * Overrides theme_menu_tree().
 */
//function gratis_menu_tree(&$vars) {
//  return '<ul class="menu nav">' . $vars['tree'] . '</ul>';
//}

/**
 * Gratis theme wrapper function for the main menu links.
 */
//function gratis_menu_tree__primary(&$vars) {
//  return '<ul class="menu nav navbar-nav">' . $vars['tree'] . '</ul>';
//}

/**
 * Theme wrapper function for the primary menu links.
 */
function gratis_menu_tree__primary(&$vars) {
  return '<ul class="toggle-menu">' . $vars['tree'] . '</ul>';
}
