@import "susy";

// Set consistent vertical and horizontal spacing units.
$vert-spacing-unit: 20px;
$horz-spacing-unit: 1em;

// Define Susy grid variables mobile first.

$total-columns: 4;
$column-width: 4em;
$gutter-width: $horz-spacing-unit;
$grid-padding: 10px;

$container-style: magic;
$container-width: 1100px;

$tab: 44em;
$desk: 70em;

// Define Susy v.2 grids.

$base-font-size: 14px;
$base-line-height: 20px;


// Define the color palettes.
$palette: ("greengray": $green_gray, "pink": $pink, "orange": $orange, "green": $chartreuse,
"purple": $purple, "turquoise": $turquoise, "pomegranate": $pomegranate, "seafoam": $sea_green);

// Fonts

$font_awesome: FontAwesome;
$vera-sans: VeraMono-webfont;

// Menu Vars.

$subMenuItemWidth: 100%;			// Minimum width for submenus' items
$baseMenuBackground: $dark_gray;			// Base color theme
$secondaryMenuBackground: $maroon; 	// Secondary color (highlights, triangles...)
$baseMenuColor: $white;				// Proper menu items color
$gutter: 1em;						// Base gutter
$input: "input[type=checkbox]";  	// Checkbox hack selector


$base-font-size: 20px; // Sets the base font size
$base-line-height: 36px; // Sets the base line height

/**
* ==============================================================================
* Typesettings
* ==============================================================================
* A Sass toolkit that sets type in Ems based on modular scale, vertical rhythm,
* and responsive ratio based headlines. Oh, and pixel borders that maintain
* rhythm.
*
* Release Versions: https://github.com/ianrose/typesettings/releases
* Github: https://github.com/ianrose/typesettings
* License: The MIT License (MIT)
*
* Inspired by and used stuff from:
* https://github.com/typeplate/typeplate.github.io
* https://github.com/csswizardry/typecsset
*/

//==============================================================================
// Config Variables
//==============================================================================
// The config variables have default values that are just looking to be adjusted.
// Use this variables to customize your Typesettings. Or take the whole thing
// apart if you want :)

// Font families and default text color.
$font-sans: 'Open-Sans', Helvetica, Arial, sans-serif;
$font-serif: Georgia, 'Times New Roman', serif;
$font-mono: 'Lucida Console', Monaco, monospace;
$text-color: $medium_gray;
$base-vertical-unit: 6px;
$base-line-multi: 4;
$base-font-size: 16px;
$ms-ratio: 1.414;
$paragraph-indent: false;
$paragraph-justify: true;


// Typesettings vars


// The vertical grid unit. Margin, padding, and line-height are set to multiples
// of this value. This is the value that determines the baseline for our vertical
// rhythm. The default value of 6px allows more fine tuned designs that still
// obey vertical rhythm.
$base-vertical-unit: 6px !default;

// The value that multiplies the $base-vertical-unit to get the $base-line-height.
// This gives type an ideal line-height.
$base-line-multi: 4 !default;

// Base font size in pixels.
$base-font-size: 16px !default;

// Modular scale ratio that is used to figure out all the different font sizes
$ms-ratio: 1.414 !default;

// [1] Paragraph setting that you can turn on or off the indent of the first line
// of a new paragraph.
// [2] Paragraph setting that you can turn on or off to have your paragraphs ragged
// right or justified.
$paragraph-indent: true !default; // [1]
$paragraph-justify: true !default; // [2]

// You can optionally load type styles that use Typesettings.
$load-typesetted: true !default;

//==============================================================================
// Internal Variables
//==============================================================================
// It's Best not to adjust the internal variables directly.[Note]

// Converts the $base-font-size value to EMs
$base-em-font-size: ($base-font-size / 16px) * 1em !default;

// Generates modular scale values in Ems. [Note]If you need more size up and/or down
// then add more sizes.
// [1] One step down in the modular scale in EMs
// [2] Two steps down in the modular scale in EMs
// [3] Three steps down in the modular scale in EMs
// [4] One step up in the modular scale in EMs
// [5] Two steps up in the modular scale in EMs
// [6] Three steps up in the modular scale in EMs
// [7] Four steps up in the modular scale in EMs
$ms-down1: $base-em-font-size / $ms-ratio; // [1]
$ms-down2: $ms-down1 /$ms-ratio; // [2]
$ms-down3: $ms-down2 / $ms-ratio; // [3]
$ms-up1: $base-em-font-size * $ms-ratio; // [4]
$ms-up2: $ms-up1 * $ms-ratio; // [5]
$ms-up3: $ms-up2 * $ms-ratio; // [6]
$ms-up4: $ms-up3 * $ms-ratio; // [7]

// Creates a unitless line-height that is based on typographic ideals and
// maintains vertical rhythm.
$base-line-height: ($base-vertical-unit * $base-line-multi) / $base-font-size;

//==============================================================================
// Helper function(s)
//==============================================================================

// Returns a number without a unit. For example 16px becomes 16
@function stripUnits($number) {
  @return $number / ($number * 0 + 1);
}

// Returns an EM value. For example 24px becomes 1.5em
@function emCalc($target, $context: $base-font-size) {
  @return stripUnits(($target / $context)) + 0em;
}

// Returns an EM value that is a multiple of our defined base vertical unit. For
// example 3 becomes 1.125em
@function emRhythm($lines: $base-vertical-unit, $font-size: $base-em-font-size) {
  @return (stripUnits($lines) * stripUnits($base-vertical-unit)) / (stripUnits($font-size) * stripUnits($base-font-size)) + 0em;
}

// Returns a unitless number that is a multiple of our defined base vertical unit.
// For example 3 becomes 1.125
@function unitlessRhythm($lines: $base-vertical-unit, $font-size: $base-em-font-size) {
  @return ($lines * stripUnits($base-vertical-unit)) / (stripUnits($font-size) * stripUnits($base-font-size));
}
